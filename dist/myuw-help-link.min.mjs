var templateHtml='<style> :host {\n    display: flex;\n    font-style: inherit;\n    font-variant: inherit;\n    font-family: inherit;\n  } </style> <a id="help-link" href="https://www.example.edu/from-myuw-help-link"> Help and resources \x3c!-- material.io launch icon--\x3e <svg id="launch-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"> <path d="M0 0h24v24H0z" fill="none"/> <path d="M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z"/> </svg> </a> ';class MyUWHelpLink extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(this.constructor.template.content.cloneNode(!0)),this.helpLinkElement=this.shadowRoot.getElementById("help-link")}static get observedAttributes(){return["app-context","url"]}static get template(){return void 0===this._template&&(this._template=document.createElement("template"),this._template.innerHTML=templateHtml),this._template}attributeChangedCallback(t,e,n){this[t]=n,this.updateComponent()}connectedCallback(){this["app-context"]=this.getAttribute("app-context"),this.url=this.getAttribute("url"),this.$link=this.shadowRoot.getElementById("help-link")}updateComponent(){const t=this.shadowRoot.getElementById("launch-icon");this.helpLinkElement.innerHTML=this["app-context"]+" help and resources ",this.helpLinkElement.appendChild(t),this.helpLinkElement.setAttribute("href",this.url),this.url&&this.url.startsWith("http")&&(this.helpLinkElement.setAttribute("rel","noopener noreferrer"),this.helpLinkElement.setAttribute("target","_blank"))}}window.customElements.define("myuw-help-link",MyUWHelpLink);
